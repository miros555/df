{"version":3,"sources":["components/Recipe.js","components/AddRecipe.js","components/Category.js","components/AddCategory.js","components/EditCategory.js","components/App.js","serviceWorker.js","index.js"],"names":["Recipe","props","fetchList_2","value","recipeId","fetch","then","res","json","data","console","log","setState","state","categoryId","title","text","this","recipe","style","width","Component","AddRecipe","fetchListRecipe","addListRecipe","sendRecipe","listPost","option","method","body","JSON","stringify","headers","deleteRecipe","filter","el","_id","onChangeInput","e","name","target","toggle","visible","error","isLoaded","openConfirm","Grid","marginTop","marginLeft","Row","Column","Input","onChange","placeholder","TextArea","Button","onClick","map","i","key","href","path","render","Category","fetchList_1","posts","listOfOneCategory","index","cursor","AddCategory","sendData","newPost","addList","onOpen","positive","Icon","EditCategory","updateData","newTitle","newList","App","fetchList","forceUpdate","onOpenEdit","removeElement","deleteCategory","visibleInputCategory","categoryDeleteId","onOpenAdd","list","className","color","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9896f178.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\n//import {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n\nclass Recipe extends Component {\n  constructor(props){\n  super(props);\n  this.state={\n    data: {},\n    categoryId:'',\n    recipeId:'',\n    title:'',\n    text:''\n   }\n\n  }\n\n  fetchList_2 = () => {\n     var  value = this.props.recipeId;\n      fetch('https://test-task-server.herokuapp.com/api/v1/recipe/item/'+value)\n            .then((res) => { return res.json() })\n            .then((data) => {\n                console.log(data);\n                this.setState({ data });\n                });\n          }\n  componentDidMount(){\n    this.fetchList_2();\n  }\n\n  render(){\nlet recipe = this.state.data;\nconsole.log(recipe);\n    return(\n<div>\n      <h2 >{recipe.title}</h2><br/>\n      <span style={{width:350}}>{recipe.text}</span>\n\n\n   </div>\n     );\n  }\n}\n\nexport default Recipe;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport {Input, TextArea, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\nimport Recipe from './Recipe';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n\nclass AddRecipe extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  data:[],\n  error: null,\n  isLoaded: false,\n  categoryId:this.props.categoryId,\n  recipeId:'',\n  title:'',\n  text:'',\n  openConfirm:false,\n  visible:false\n}\n\n}\n\nfetchListRecipe = () => {\nfetch('https://test-task-server.herokuapp.com/api/v1/recipe/byCategory/'+this.props.categoryId)\n            .then((res) => { return res.json() })\n            .then((data) => {\n                console.log(data);\n                this.setState({ data: data });\n                });\n\n}\n\naddListRecipe = (value) => {\n  this.setState({data: [...this.state.data, value]});\n  this.fetchListRecipe ();\n}\n\ncomponentDidMount(){\n  this.fetchListRecipe ();\n  }\n\n\nsendRecipe = () => {\n\n  const listPost = {\n    title: this.state.title,\n    text: this.state.text,\n    categoryId: this.props.categoryId\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/create';\n  var option = {\n    method: \"POST\",\n    body: JSON.stringify(listPost),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          this.setState({\n            categoryId:'',\n            title:'',\n            text:''\n        });\n    }).then(\n           this.fetchListRecipe(),\n           this.addListRecipe(listPost)\n    //this.setState({onOpenEdit:false})\n  );\n\n  }\n\ndeleteRecipe = (value) => {\n  //var recipeId = this.state.recipeId;\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/'+value;\n  var option = {\n    method: \"DELETE\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n    });\n\n    this.setState({data: this.state.data.filter(el => el._id !==value)});\n    //this.fetchListRecipe()\n\n}\n\n  onChangeInput = (e) => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value});\n    }\n\n  toggle = () => {\n    this.setState({visible:!this.state.visible})\n  }\n\n\nrender(){\n\n\n\n  return (\n <Router>\n  <Grid style={{marginTop:-50,marginLeft:550}}>\n  <Grid.Row>\n  <Grid.Column width={5}>\n  {this.state.recipeId}\n  <Input onChange={this.onChangeInput} style={{width:350}} name='title' placeholder='Title' value={this.state.title}/>\n  <TextArea onChange={this.onChangeInput} style={{width:350}} name='text' placeholder='Text of your Recipe' value={this.state.text} />\n  <Button onClick={this.sendRecipe} >Add</Button><br/>\n\nList Recipes of this Category:<br/>\n  { this.state.data.map((el,i)=>{return <li key={i}>\n  <a href={\"/recipe\"+el._id}>{el.title}</a>\n  <Button style={{marginLeft:150}} onClick={()=>{this.setState({recipeId:el._id});\n          this.deleteRecipe(el._id) }} >Delete</Button>{' '}\n\n<Route path={\"/recipe\"+el._id} render={()=><Recipe recipeId={el._id} />} />\n\n{/*{this.state.openConfirm?<Button onClick={this.deleteRecipe}>Yes</Button>:''}*/}\n  </li> }) }\n\n  </Grid.Column>\n  </Grid.Row>\n  </Grid>\n\n\n  </Router>);\n\n}\n}\n\n\nexport default AddRecipe;\n","import React, { Component } from 'react';\nimport {Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\nimport Recipe from './Recipe';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n\nclass Category extends Component {\n  constructor(props){\n  super(props);\n  this.state={\n    posts: [],\n    data: [],\n    visible:'',\n    categoryId:'',\n    title:'',\n    text:''\n   }\n\n  }\n\n  fetchList_1 = () => {\n     var  value = this.props.categoryId;\n      fetch('https://test-task-server.herokuapp.com/api/v1/recipe/byCategory/'+value)\n            .then((res) => { return res.json() })\n            .then((data) => {\n                console.log(data);\n                this.setState({ data });\n                });\n          }\n  componentDidMount(){\n    this.fetchList_1();\n  }\n\n\n  render(){\nlet listOfOneCategory = this.state.data;\n\n    return(\n\n<div>\n      {listOfOneCategory.map((el,index)=>{return <li key={index}>\n<a style={{cursor:'pointer'}}><div onClick={()=>{\n      this.setState({visible:!this.state.visible})} }>\n\n      {el.title} </div> </a><br/>\n      <span style={{width:350}}>{el._id}</span>\n      {this.state.visible ? <Recipe recipeId={el._id} /> : ''}\n{/*\n     <Route path={\"/recipe/\"+el._id} render={()=><Recipe recipeId={el._id} />} />\n     <Recipe recipeId={el._id} />\n     href={\"/recipe/\"+el._id}\n*/}\n          </li>}) }\n\n\n   </div>\n     );\n  }\n}\n\nexport default Category;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport {Input, List, Grid, Button, Icon } from 'semantic-ui-react';\n//import {requestSuccess,request,requestError,fetchList} from '../actions';\n//import AddRecipe from './AddRecipe';\n\nclass AddCategory extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  posts: [],\n  data: [],\n  error: null,\n  isLoaded: false,\n  categoryId:'',\n  title:'',\n  text:'',\n  visible:false,\n  onOpen:false\n }\n\n}\n\ncomponentDidMount(){\n  //this.props.dispatch(fetchList());\n  fetch('https://test-task-server.herokuapp.com/api/v1/category/all')\n            .then((res) => { return res.json() })\n            .then((data) => {\n                console.log(data);\n                this.setState({ data });\n                });\n}\n\n\n\n\nsendData = () => {\n\n  const newPost = {\n    title: this.state.title,\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/category/create';\n  var option = {\n    method: \"POST\",\n    body: JSON.stringify(newPost),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          this.props.addList(newPost) })\n.then(this.setState({title:''}));\n  }\n\n\nonChangeInput = (e) => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value});\n    }\n\n  toggle = () => {\n    this.setState({visible:!this.state.visible})\n  }\n\n\n\nrender(){\n\n\n  return (\n\n\n    <Grid>\n    <Grid.Row width={3}>\n    <Input onChange={this.onChangeInput} name='title' placeholder='Title' value={this.state.title}/>\n    <Button positive onClick={this.sendData} >\n      <Icon name='plus' />Add</Button>\n      </Grid.Row>\n      </Grid>\n\n\n  );\n\n}\n}\n\n\nexport default AddCategory;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport {Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\n//import {requestSuccess,request,requestError,fetchList} from '../actions';\n//import AddRecipe from './AddRecipe';\n\nclass EditCategory extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  posts: [],\n  data: [],\n  error: null,\n  isLoaded: false,\n  categoryId:'',\n  title:'',\n  text:'',\n  visible:false,\n  onOpen:false\n }\n\n\n}\n\n\n\nupdateData = () => {\n\n  const newTitle = {\n      _id: this.props.categoryId,\n    title: this.state.title,\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/category/update';\n  var option = {\n    method: \"PUT\",\n    body: JSON.stringify(newTitle),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          //var a = this.props.categoryId;\n          //var b = this.state.title;\n          this.props.newList();\n          //this.props.addList(newPost)\n        })\n.then(this.setState({title:''}) );\n\n\n\n  }\n\n\nonChangeInput = (e) => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value});\n    }\n\n  toggle = () => {\n    this.setState({visible:!this.state.visible})\n  }\n\n\n\nrender(){\n\n\n  return (\n\n\n    <Grid style={{marginTop:-50,marginLeft:550}}>\n    <Grid.Row width={3}>\n    <Input onChange={this.onChangeInput} name='title' placeholder={this.props.title} value={this.state.title}/>\n    <Button positive onClick={this.updateData} >\n      <Icon name='plus' />Edit Name of Category</Button>\n      </Grid.Row>\n      </Grid>\n\n\n  );\n\n}\n}\n\n\nexport default EditCategory;\n","import React, { Component } from 'react';\n//import {connect} from 'react-redux';\n//import {bindActionCreators} from 'redux';\nimport '../App.css';\nimport {Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\n//import {requestSuccess,request,requestError,fetchList} from '../actions';\nimport AddRecipe from './AddRecipe';\nimport Recipe from './Recipe';\nimport Category from './Category';\nimport AddCategory from './AddCategory';\nimport EditCategory from './EditCategory';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n//import {fetchList} from '../actions';\n\n\nclass App extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  posts: [],\n  data: [],\n  error: null,\n  isLoaded: false,\n  categoryId:'',\n  title:'',\n  text:'',\n  categoryDeleteId:'',\n  visibleInputCategory:false,\n  onOpenAdd:false,\n  onOpenEdit:false\n }\n\n}\n\n\nfetchList = () => {\n    fetch('https://test-task-server.herokuapp.com/api/v1/category/all')\n          .then((res) => { return res.json() })\n          .then((data) => {\n              console.log(data);\n              this.setState({ data });\n              });\n        }\ncomponentDidMount(){\n  //this.props.dispatch(fetchList());\n  this.fetchList();\n}\n\naddList = (value) => {\n  this.setState({data:[...this.state.data, value]});\n  this.fetchList();\n}\n\nnewList = () => {\n  this.fetchList();\n  this.forceUpdate();\n  this.setState({onOpenEdit:false})\n\n}\n\nremoveElement = (value) => {\n    this.setState({\n        data: this.state.data.filter(el => el._id !== value)\n    })\n}\n\nsendData = () => {\n\n  const listPost = {\n    title: this.state.title,\n    text: this.state.text,\n    categoryId: this.state.categoryId\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/create';\n  var option = {\n    method: \"POST\",\n    body: JSON.stringify(listPost),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n  //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          this.setState({\n            categoryId:'',\n            title:'',\n            text:''\n        });\n    })\n\n\n  }\n\n\ndeleteCategory = (value) => {\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/category/'+value;\n  var option = {\n    method: \"DELETE\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n  };\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n    })\n}\n\n  onChangeInput = (e) => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value});\n    }\n\n  toggle = () => {\n    this.setState({visibleInputCategory:!this.state.visibleInputCategory})\n  }\n\n\n\nrender(){\n\n    let list = this.state.data;\n\n  return (\n\n<Router>\n\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n    <h2>AdminPanel</h2>\n      </header>\n\n\n{/*this.state.categoryId*/}\n<b>{this.state.title}</b>{' '}>>{' '}\n{this.state.visibleInputCategory ? <AddCategory addList={this.addList}/> : ''}\n\n{/*{this.state.onOpen ? <AddRecipe categoryId={this.state.categoryId} /> : ''}\n*/}\n\n{!this.state.visibleInputCategory?<Button style={{marginLeft:350}} positive onClick={this.toggle}>\n<Icon name='plus' />Add New Category</Button>:\n<Button style={{marginLeft:350}} onClick={this.toggle}>\n<Icon name='times' /></Button>}\n\n\n{list.map((el,index)=>{return <li key={index}>\n<span style={{width:350}}>{el._id}</span><br/>\n\n<a href={\"/category/\"+el._id}>\n<Button onClick={()=>this.setState({title:el.title})} style={{width:230}}>{/*{el.title}*/}\n<span style={{color:'#2874A6'}}>{el.title}</span></Button></a>\n\n\n<Button positive onClick={()=>this.setState({categoryId:el._id,\n                   title:el.title, onOpenAdd:!this.state.onOpenAdd,onOpenEdit:false})}>\n <Icon name='plus' />New Recipe</Button>\n\n <Button onClick={()=>this.setState({categoryId:el._id,onOpenEdit:true,onOpenAdd:false})}>\n<Icon name='edit' /></Button>\n\n <Button onClick={()=>{this.setState({categoryDeleteId:el._id});this.deleteCategory(el._id); this.removeElement(el._id); }}>\n <Icon name='times' /></Button>\n\n {this.state.onOpenAdd&&el._id===this.state.categoryId ?\n     <AddRecipe categoryId={this.state.categoryId} fetchList={this.fetchList} /> : ''}\n\n {this.state.onOpenEdit&&el._id===this.state.categoryId ?\n     <EditCategory title={el.title} categoryId={this.state.categoryId} newList={this.newList} /> : ''}\n\n<Route path={\"/category/\"+el._id} render={()=><Category categoryId={el._id} />}   />\n\n </li>}) }\n\n{/*<Route path=\"/:el._id\" component={Category} categoryId={el._id} />\n<Route path='/recipe/' component={Recipe}/>\n\n<Route path=\"/recipe/\" render={()=><Recipe /> }   />\n*/}\n\n\n</div>\n\n    </Router>);\n\n   }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport { BrowserRouter, Router, Route, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport AddCategory from './components/AddRecipe';\nimport EditCategory from './components/EditCategory';\n\nimport * as serviceWorker from './serviceWorker';\n//import reducer from './reducer';\n\n\n\n\n// Container component\nReactDOM.render(\n<BrowserRouter>\n           <App/></BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}