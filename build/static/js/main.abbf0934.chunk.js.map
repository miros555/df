{"version":3,"sources":["logo.svg","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","toggle","setState","visible","state","posts","data","error","isLoaded","categoryId","title","text","onChangeInput","bind","sendData","fetch","then","res","json","console","log","this","mode","body","JSON","stringify","headers","method","redirect","response","status","Error","catch","e","name","target","value","addInput","list","Grid","style","color","className","Input","onChange","placeholder","Button","positive","onClick","Icon","map","el","index","key","marginTop","marginLeft","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,6NC8J5BC,E,YArJf,WAAYC,GAAO,IAAD,8BAClB,4CAAMA,KA+FJC,OAAO,WACL,EAAKC,SAAS,CAACC,SAAS,EAAKC,MAAMD,WA/FvC,EAAKC,MAAM,CACTC,MAAO,GACPC,KAAM,GACNC,MAAO,KACPC,UAAU,EACVC,WAAW,GACXC,MAAM,GACNC,KAAK,GACLR,SAAQ,GAGT,EAAKS,cAAc,EAAKA,cAAcC,KAAnB,gBACnB,EAAKC,SAAS,EAAKA,SAASD,KAAd,gBAdG,E,iFAiBE,IAAD,OAEjBE,MAAM,8DACKC,KAAK,SAACC,GAAU,OAAOA,EAAIC,SAC3BF,KAAK,SAACV,GACHa,QAAQC,IAAId,GACZ,EAAKJ,SAAS,CAAEI,a,iCAQ9B,IACIA,EAAO,CACT,MAASe,KAAKjB,MAAMM,MACpB,KAAOW,KAAKjB,MAAMO,KAClB,WAAaU,KAAKjB,MAAMK,YAExBM,MANQ,8DAMG,CACTO,KAAM,cACNC,KAAMC,KAAKC,UAAUnB,GAKrBoB,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,SAAU,WAEXZ,KAAK,SAAAa,GACJ,GAAwB,MAApBA,EAASC,OAGd,MAAM,IAAIC,MAAM,uCAFbZ,QAAQC,IAAIS,EAASlB,UAK1BqB,MAAM,SAAAzB,GACLY,QAAQZ,MAAMA,O,oCA+BF0B,GACV,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACvBf,KAAKnB,SAAL,eAAgBgC,EAAOE,M,+BAWzB,IAGIC,EAHAC,EAAOjB,KAAKjB,MAAME,KAkBxB,OAZMe,KAAKjB,MAAMD,UACbkC,EAAW,kBAACE,EAAA,EAAD,KACX,yBAAKC,MAAO,CAACC,MAAM,OAAQC,UAAU,uBACrC,kBAACC,EAAA,EAAD,CAAOC,SAAUvB,KAAKT,cAAesB,KAAK,aAAaW,YAAY,WAAWT,MAAOf,KAAKjB,MAAMK,aAChG,kBAACkC,EAAA,EAAD,CAAOC,SAAUvB,KAAKT,cAAesB,KAAK,QAAQW,YAAY,QAAQT,MAAOf,KAAKjB,MAAMM,QACxF,8BAAUkC,SAAUvB,KAAKT,cAAesB,KAAK,OAAOW,YAAY,SAAST,MAAOf,KAAKjB,MAAMO,OACzF,kBAACmC,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAAS3B,KAAKP,UAC/B,kBAACmC,EAAA,EAAD,CAAMf,KAAK,SADX,UAOJ,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAEjB,6BAGFJ,EAAKY,IAAI,SAACC,EAAGC,GAAU,OAAO,wBAC/BC,IAAKD,GAAQD,EAAGzC,MAAM,6BAAMyC,EAAGxC,SAK7B,uCACA,kBAACmC,EAAA,EAAD,CAAQN,MAAO,CAACc,WAAW,GAAGC,WAAW,IAAKR,UAAQ,EAACC,QAAS3B,KAAKpB,QACpE,kBAACgD,EAAA,EAAD,CAAMf,KAAK,SADZ,eAEEG,GAGDhB,KAAKjB,MAAMK,gB,GA9IA+C,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC,iB","file":"static/js/main.abbf0934.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from '../logo.svg';\n//import {connect} from 'react-redux';\n//import {bindActionCreators} from 'redux';\nimport '../App.css';\nimport {Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\nimport {requestSuccess,request,requestError,fetchList} from '../actions';\n\nclass App extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  posts: [],\n  data: [],\n  error: null,\n  isLoaded: false,\n  categoryId:'',\n  title:'',\n  text:'',\n  visible:false\n }\n\n this.onChangeInput=this.onChangeInput.bind(this);\n this.sendData=this.sendData.bind(this);\n}\n\ncomponentDidMount(){\n  //this.props.dispatch(fetchList());\n  fetch('https://test-task-server.herokuapp.com/api/v1/category/all')\n            .then((res) => { return res.json() })\n            .then((data) => {\n                console.log(data);\n                this.setState({ data });\n                });\n}\n\n\n\n\nsendData () {\n  var url = 'https://test-task-server.herokuapp.com/api/v1/recipe/create';\n  var data = {\n    \"title\": this.state.title,\n    \"text\":this.state.text,\n    \"categoryId\":this.state.categoryId\n  };\n    fetch(url, {\n      mode: 'same-origin',\n      body: JSON.stringify(data),\n      /*headers: {\n        'dataType': 'json',\n        'content-type': 'application/json'\n      },*/\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      redirect: 'follow'\n    })\n    .then(response => {\n      if (response.status === 200) {\n        console.log(response.text());\n    } else {\n     throw new Error('Something went wrong on api server!');\n    }\n  })\n  .catch(error => {\n    console.error(error);\n  });\n\n\n  /*\n  const listPost = {\n    title: this.state.title\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/create';\n  var option = {\n  method: \"post\",\n  headers: {\"X-API-TOKEN\": \"###\"},\n  contentType: \"application/json\",\n  payload: JSON.stringify(listPost),\n  muteHttpExceptions: true,\n};\n  //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n\n          this.setState({\n            categoryId:'',\n            title:'',\n            text:''\n        });\n    })\n*/\n\n  }\n\n\n  onChangeInput(e) {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value});\n    }\n\n  toggle=()=>{\n    this.setState({visible:!this.state.visible})\n  }\n\n\n\n  render(){\n\n    let list = this.state.data;\n\n\n    let addInput;\n\n\n    if (this.state.visible){\n      addInput = <Grid>\n      <div style={{color:'red'}} className='panel panel-default'>\n      <Input onChange={this.onChangeInput} name='categoryId' placeholder='Category' value={this.state.categoryId}/>\n      <Input onChange={this.onChangeInput} name='title' placeholder='Title' value={this.state.title}/>\n      <textarea onChange={this.onChangeInput} name='text' placeholder='Recipe' value={this.state.text} />\n        <Button positive onClick={this.sendData} >\n        <Icon name='plus' />Add</Button>\n          </div>\n          </Grid>\n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n       <div>\n\n\n    {list.map((el,index)=>{ return <li\n    key={index}>{el.title}<br/>{el.text}</li>}) }\n\n\n  </div>\n\n      <h2>Adminka</h2>\n      <Button style={{marginTop:-50,marginLeft:50}} positive onClick={this.toggle}>\n       <Icon name='plus' />Add To List</Button>\n       {addInput}\n      </header>\n\n      {this.state.categoryId}\n    </div>\n  );\n\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import {createStore, applyMiddleware, compose} from 'redux';\n//mport {Provider} from 'react-redux';\n//import thunk from 'redux-thunk';\n//import { createSelector } from 'reselect';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n//import reducer from './reducer';\n\n\n\n\n// Container component\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}