{"ast":null,"code":"var _jsxFileName = \"/Users/admin/github/df/src/components/AddRecipe.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\n\nclass AddRecipe extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        visible: !this.state.visible\n      });\n    };\n\n    this.state = {\n      data: [],\n      error: null,\n      isLoaded: false,\n      categoryId: this.props.categoryId,\n      recipeId: '',\n      title: '',\n      text: '',\n      openConfirm: false,\n      visible: false\n    };\n    this.onChangeInput = this.onChangeInput.bind(this);\n    this.sendRecipe = this.sendRecipe.bind(this);\n    this.deleteRecipe = this.deleteRecipe.bind(this); //this.reload=this.reload.bind(this);\n  }\n\n  componentDidMount() {\n    //this.props.dispatch(fetchList());\n    fetch('https://test-task-server.herokuapp.com/api/v1/recipe/byCategory/' + this.props.categoryId).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      this.setState({\n        data: data\n      });\n    });\n  }\n\n  sendRecipe() {\n    const listPost = {\n      title: this.state.title,\n      text: this.state.text,\n      categoryId: this.props.categoryId\n    };\n    var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/create';\n    var option = {\n      method: \"POST\",\n      body: JSON.stringify(listPost),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    fetch(qUrl, option).then(data => {\n      console.log(\"Successful\" + data);\n      this.setState({\n        categoryId: '',\n        title: '',\n        text: ''\n      });\n    });\n  }\n\n  deleteRecipe() {\n    //var recipeId = this.state.recipeId;\n    var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/' + this.state.recipeId;\n    var option = {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    fetch(qUrl, option).then(data => {\n      console.log(\"Successful\" + data);\n      this.setState({\n        categoryId: '',\n        title: '',\n        text: ''\n      });\n    });\n  }\n\n  onChangeInput(e) {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /*\n    reload = () => {\n       fetch('https://test-task-server.herokuapp.com/api/v1/recipe/byCategory/'+this.props.categoryId)\n                  .then((res) => { return res.json() })\n                  .then((data) => {\n                      console.log(data);\n                      this.setState({ data: data });\n                      });\n      }\n  */\n  render() {\n    //var s = new Date().getTime() / 1000;\n    //this.reload();\n    return React.createElement(Grid, {\n      style: {\n        marginTop: -50,\n        marginLeft: 550\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Selected Category Id: \", this.state.categoryId, React.createElement(Input, {\n      onChange: this.onChangeInput,\n      name: \"title\",\n      placeholder: \"Title\",\n      value: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      onChange: this.onChangeInput,\n      name: \"text\",\n      placeholder: \"Text of your Recipe\",\n      value: this.state.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.sendRecipe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Add\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), \"List Recipes of this Category:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), this.state.data.map((el, i) => {\n      return React.createElement(\"li\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, el.title);\n    }))));\n  }\n\n}\n\nexport default AddRecipe;","map":{"version":3,"sources":["/Users/admin/github/df/src/components/AddRecipe.js"],"names":["React","Component","Input","List","Grid","Image","Button","Icon","AddRecipe","constructor","props","toggle","setState","visible","state","data","error","isLoaded","categoryId","recipeId","title","text","openConfirm","onChangeInput","bind","sendRecipe","deleteRecipe","componentDidMount","fetch","then","res","json","console","log","listPost","qUrl","option","method","body","JSON","stringify","headers","e","name","target","value","render","marginTop","marginLeft","map","el","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport {Input, List, Grid, Image, Button, Icon } from 'semantic-ui-react';\n\nclass AddRecipe extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\n  data:[],\n  error: null,\n  isLoaded: false,\n  categoryId:this.props.categoryId,\n  recipeId:'',\n  title:'',\n  text:'',\n  openConfirm:false,\n  visible:false\n }\n\n this.onChangeInput=this.onChangeInput.bind(this);\n this.sendRecipe=this.sendRecipe.bind(this);\n this.deleteRecipe=this.deleteRecipe.bind(this);\n //this.reload=this.reload.bind(this);\n}\n\n\ncomponentDidMount(){\n    //this.props.dispatch(fetchList());\n  fetch('https://test-task-server.herokuapp.com/api/v1/recipe/byCategory/'+this.props.categoryId)\n              .then((res) => { return res.json() })\n              .then((data) => {\n                  console.log(data);\n                  this.setState({ data: data });\n                  });\n  }\n\n\nsendRecipe () {\n\n  const listPost = {\n    title: this.state.title,\n    text: this.state.text,\n    categoryId: this.props.categoryId\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/create';\n  var option = {\n    method: \"POST\",\n    body: JSON.stringify(listPost),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          this.setState({\n            categoryId:'',\n            title:'',\n            text:''\n        });\n    })\n\n\n  }\n\ndeleteRecipe(){\n  //var recipeId = this.state.recipeId;\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/recipe/'+this.state.recipeId;\n  var option = {\n    method: \"DELETE\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          this.setState({\n            categoryId:'',\n            title:'',\n            text:''\n        });\n    })\n\n}\n\n  onChangeInput(e) {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value});\n    }\n\n  toggle=()=>{\n    this.setState({visible:!this.state.visible})\n  }\n\n/*\n  reload = () => {\n     fetch('https://test-task-server.herokuapp.com/api/v1/recipe/byCategory/'+this.props.categoryId)\n                .then((res) => { return res.json() })\n                .then((data) => {\n                    console.log(data);\n                    this.setState({ data: data });\n                    });\n    }\n*/\n\nrender(){\n\n//var s = new Date().getTime() / 1000;\n\n//this.reload();\n\n\n  return (\n\n  <Grid style={{marginTop:-50,marginLeft:550}}>\n  <Grid.Row>\n  <Grid.Column width={5}>\n  Selected Category Id: {this.state.categoryId}\n  <Input onChange={this.onChangeInput} name='title' placeholder='Title' value={this.state.title}/>\n  <textarea onChange={this.onChangeInput} name='text' placeholder='Text of your Recipe' value={this.state.text} />\n  <Button onClick={this.sendRecipe} >Add</Button><br/>\n\nList Recipes of this Category:<br/>\n  { this.state.data.map((el,i)=>{return <li key={i}>{el.title}\n  {/*<Button onClick={this.setState({recipeId:el._id})} >\n  <Icon name='delete' />Delete</Button>{' '}{el._id}\n{this.state.openConfirm?<Button onClick={this.deleteRecipe}>Yes</Button>:''}*/}\n  </li> }) }\n\n  </Grid.Column>\n  </Grid.Row>\n  </Grid>\n\n\n  );\n\n}\n}\n\n\nexport default AddRecipe;\n"]},"metadata":{},"sourceType":"module"}