{"ast":null,"code":"var _jsxFileName = \"/Users/admin/github/df/src/components/AddCategory.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { Input, List, Grid, Button, Icon } from 'semantic-ui-react';\nimport { FormErrors } from './FormErrors';\nimport { Col, Form, FormGroup, FormControl, Clearfix, Tab, Row, Nav, NavItem } from 'react-bootstrap'; //import {requestSuccess,request,requestError,fetchList} from '../actions';\n//import AddRecipe from './AddRecipe';\n\nclass AddCategory extends Component {\n  constructor() {\n    super();\n\n    this.sendData = () => {\n      const newPost = {\n        title: this.state.title\n      };\n      var qUrl = 'https://test-task-server.herokuapp.com/api/v1/category/create';\n      var option = {\n        method: \"POST\",\n        body: JSON.stringify(newPost),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      };\n      fetch(qUrl, option).then(data => {\n        console.log(\"Successful\" + data);\n        this.props.addList(newPost);\n      }).then(this.setState({\n        title: '',\n        formErrors: {\n          title: ''\n        },\n        formValid: false\n      }));\n    };\n\n    this.onChangeInput = e => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({\n        [name]: value\n      }, () => {\n        this.validateField(name, value);\n      });\n    };\n\n    this.toggle = () => {\n      this.setState({\n        visible: !this.state.visible\n      });\n    };\n\n    this.state = {\n      posts: [],\n      data: [],\n      error: null,\n      isLoaded: false,\n      categoryId: '',\n      title: '',\n      text: '',\n      visible: false,\n      onOpen: false,\n      formErrors: {\n        title: ''\n      },\n      formValid: true,\n      titleValid: false\n    };\n  }\n\n  componentDidMount() {\n    //this.props.dispatch(fetchList());\n    fetch('https://test-task-server.herokuapp.com/api/v1/category/all').then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      this.setState({\n        data\n      });\n    });\n  }\n\n  validateField(fieldName, value) {\n    let fieldValidationErrors = this.state.formErrors;\n    let titleValid = this.state.titleValid;\n\n    switch (fieldName) {\n      case 'title':\n        titleValid = value.length >= 3;\n        fieldValidationErrors.title = titleValid ? '' : ' is too short';\n        break;\n    }\n\n    this.setState({\n      formErrors: fieldValidationErrors,\n      titlValid: titleValid\n    }, this.validateForm);\n  }\n\n  validateForm() {\n    this.setState({\n      formValid: this.state.titleValid\n    });\n  }\n\n  render() {\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      width: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        color: 'red',\n        margiLeft: 150\n      },\n      className: \"panel panel-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(FormErrors, {\n      formErrors: this.state.formErrors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Input, {\n      onChange: this.onChangeInput,\n      name: \"title\",\n      placeholder: \"Title\",\n      value: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Button, {\n      positive: true,\n      onClick: this.sendData,\n      disabled: this.state.formValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), \"Add\")));\n  }\n\n}\n\nexport default AddCategory;","map":{"version":3,"sources":["/Users/admin/github/df/src/components/AddCategory.js"],"names":["React","Component","Input","List","Grid","Button","Icon","FormErrors","Col","Form","FormGroup","FormControl","Clearfix","Tab","Row","Nav","NavItem","AddCategory","constructor","sendData","newPost","title","state","qUrl","option","method","body","JSON","stringify","headers","fetch","then","data","console","log","props","addList","setState","formErrors","formValid","onChangeInput","e","name","target","value","validateField","toggle","visible","posts","error","isLoaded","categoryId","text","onOpen","titleValid","componentDidMount","res","json","fieldName","fieldValidationErrors","length","titlValid","validateForm","render","color","margiLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport {Input, List, Grid, Button, Icon } from 'semantic-ui-react';\nimport {FormErrors} from './FormErrors';\nimport { Col, Form, FormGroup, FormControl,\n   Clearfix, Tab, Row, Nav, NavItem } from 'react-bootstrap';\n//import {requestSuccess,request,requestError,fetchList} from '../actions';\n//import AddRecipe from './AddRecipe';\n\nclass AddCategory extends Component {\nconstructor(){\nsuper();\nthis.state={\n  posts: [],\n  data: [],\n  error: null,\n  isLoaded: false,\n  categoryId:'',\n  title:'',\n  text:'',\n  visible:false,\n  onOpen:false,\n\n  formErrors: {title: ''},\n  formValid: true,\n  titleValid: false\n }\n\n}\n\ncomponentDidMount(){\n  //this.props.dispatch(fetchList());\n  fetch('https://test-task-server.herokuapp.com/api/v1/category/all')\n            .then((res) => { return res.json() })\n            .then((data) => {\n                console.log(data);\n                this.setState({ data });\n                });\n}\n\n\nvalidateField (fieldName, value) {\n  let fieldValidationErrors = this.state.formErrors;\n  let titleValid = this.state.titleValid;\nswitch(fieldName) {\n    case 'title':\n      titleValid = value.length >= 3;\n      fieldValidationErrors.title = titleValid ? '': ' is too short';\n\n      break;\n  }\n  this.setState({formErrors: fieldValidationErrors,\n                  titlValid: titleValid\n                }, this.validateForm);\n}\nvalidateForm() {\n  this.setState({formValid: this.state.titleValid});\n}\n\n\n\n\n\n\n\n\nsendData = () => {\n\n  const newPost = {\n    title: this.state.title,\n  };\n  var qUrl = 'https://test-task-server.herokuapp.com/api/v1/category/create';\n  var option = {\n    method: \"POST\",\n    body: JSON.stringify(newPost),\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n};\n\n  fetch(qUrl, option).then(data =>{\n          console.log(\"Successful\" + data);\n          this.props.addList(newPost) })\n.then(this.setState({\n  title:'',\n  formErrors: {title: ''},\n  formValid: false\n}));\n  }\n\n\nonChangeInput = (e) => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({[name]: value},\n                    () => { this.validateField(name, value) });\n    }\n\ntoggle = () => {\n    this.setState({visible:!this.state.visible})\n  }\n\n\n\nrender(){\n\n\n  return (\n\n\n    <Grid>\n    <Grid.Row width={3}>\n<div style={{color:'red',margiLeft:150}} className='panel panel-default'>\n      <FormErrors formErrors={this.state.formErrors} />\n        </div><br/>\n\n    <Input onChange={this.onChangeInput} name='title' placeholder='Title' value={this.state.title}/>\n    <Button positive onClick={this.sendData} disabled={this.state.formValid}>\n      <Icon name='plus' />Add</Button>\n      </Grid.Row>\n      </Grid>\n\n\n  );\n\n}\n}\n\n\nexport default AddCategory;\n"]},"metadata":{},"sourceType":"module"}